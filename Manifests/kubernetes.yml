apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-webapp
  namespace: user-workloads
  labels:
    app: webapp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
        - name: container-webapp
          image: <azure_container_registry_wildcard>.azurecr.io/webapp:<container_image_tag_wildcard>
          env:
            - name: HOSTINGSTRATEGY
              value: "Containerized"
            - name: HOSTINGSERVICE
              value: "Azure Kubernetes Service"
          livenessProbe:
            httpGet:
              path: /status/liveness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /status/readiness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          startupProbe:
            httpGet:
              path: /status/startup
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
          volumeMounts:
            - name: azure-fileshare-volume
              mountPath: /data
              readOnly: false
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
      volumes:
        - name: azure-fileshare-volume
          persistentVolumeClaim:
            claimName: azure-fileshare-volume-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: service-webapp
  namespace: user-workloads
  labels:
    app: webapp
spec:
  type: LoadBalancer
  selector:
    app: webapp
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
